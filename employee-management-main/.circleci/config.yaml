version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1
  docker: circleci/docker@2.4.0
  snyk: snyk/snyk@2.0.2

jobs:
  build:
    docker:
      - image: cimg/openjdk:17.0.0

      # 
    steps:
      - checkout 

      - snyk/install

      # - run:
      #     name: Grant executable permissions to mvnw
      #     command: chmod +x mvnw

      # - run:
      #     name: Run code scan
      #     command: snyk code test

      # - run:
      #     name: Run Snyk test
      #     command: snyk test --file=pom.xml

      # - snyk/scan:
      #     command: iac test ./manifests/secrets.yaml ./manifests/service.yaml ./manifests/deployment.yaml

      - run:
          name: Run tests  
          command: mvn clean install

      - run:
          name: Run code coverage
          command: |
            mvn jacoco:prepare-agent clean install
            mvn jacoco:report
            mvn jacoco:report-aggregate
            mvn jacoco:report-integration
      - store_artifacts:
          path: target/site/jacoco
          destination: code-coverage-report       


workflows:
  version: 2
  build:
    jobs:
      - build:
           context: secrets






      # - run:
      #     name: SonarQube Analysis
      #     command: |
      #       mvn sonar:sonar \
      #         -Dsonar.host.url=$SONAR_HOST_URL \
      #         -Dsonar.login=$SONAR_TOKEN

              # -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              # -Dsonar.projectName=$SONAR_PROJECT_NAME \
              # -Dsonar.coverage.jacoco.xmlReportPaths=/target

  # aws-example:
  #   docker:
  #     - image: cimg/openjdk:17.0.0

  #   environment:
  #     AWS_REGION: us-east-1 

  #   working_directory: ~/project

  #   steps:
  #     - checkout

  #     - run:
  #         name: Run tests  
  #         command: mvn clean verify
  #     - aws-cli/setup:
  #         role-arn: $ROLE_ARN
  #         aws-region: AWS_REGION
  #         profile-name: "OIDC-PROFILE"
  #         role-session-name: "example-session"
  #         session-duration: "1800"

  #     - setup_remote_docker:
  #         docker_layer_caching: true

  #     - run:
  #         name: build docker image
  #         command: | 
  #           id
  #           sudo docker --version
  #           aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 004059382534.dkr.ecr.us-east-1.amazonaws.com
  #           sudo docker build -t backend-app-circleci .
  #           sudo docker tag backend-app-circleci:latest 004059382534.dkr.ecr.us-east-1.amazonaws.com/backend-app-circleci:${CIRCLE_SHA1}




      # - run:
      #     name: Scan Docker Image with Trivy
      #     command: |
      #       sudo apt-get update -q && sudo apt-get install -yq --no-install-recommends wget
      #       wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
      #       echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
      #       sudo apt-get update -q
      #       sudo apt-get install -yq trivy
      #       trivy image --severity HIGH,CRITICAL 524713415075.dkr.ecr.us-east-1.amazonaws.com/backend-app-circleci:${CIRCLE_SHA1}
  #     - run:
  #         name: Push Docker Image to ECR
  #         command: |
  #           sudo docker push 004059382534.dkr.ecr.us-east-1.amazonaws.com/backend-app-circleci:${CIRCLE_SHA1}

  #           # sudo docker push 004059382534.dkr.ecr.us-east-1.amazonaws.com/backend-app-circleci:${CIRCLE_SHA1}
  # deploy:
  #   docker:
  #       - image: cimg/base:stable    
  #   steps:
  #       - run:
  #           name: Install kubectl
  #           command: |
  #             export K8S_VERSION="v1.22.3"  # Set the desired kubectl version
  #             curl -LO "https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl"
  #             chmod +x ./kubectl
  #             sudo mv ./kubectl /usr/local/bin/kubectl
  #             kubectl version --client

  #       - aws-cli/setup:
  #           role-arn: $ROLE_ARN
  #           aws-region: AWS_REGION
  #           profile-name: "OIDC-PROFILE"
  #           role-session-name: "example-session"
  #           session-duration: "1800"

  #       - setup_remote_docker:
  #          docker_layer_caching: true

  #       - run:
  #           name: Authenticate Docker with Amazon ECR using OIDC
  #           command: | 
  #             id
  #             sudo docker --version
  #             aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 524713415075.dkr.ecr.us-east-1.amazonaws.com

  #       - run:
  #           name: Configure kubectl for the specified EKS cluster
  #           command: |
  #             aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME} --profile OIDC-PROFILE

  #       - run:
  #           name: Print OIDC Configuration
  #           command: |
  #             aws eks --region ${AWS_REGION} describe-cluster --name ${EKS_CLUSTER_NAME} --query cluster.identity.oidc


  #       - run:
  #           name: get context
  #           command: |
  #             kubectl config get-context


  #       - run:
  #           name: Deploy the application to EKS using deployment.yaml and service.yaml
  #           command: |
  #              kubectl apply -f ./manifests/deployment.yaml 
  #              kubectl apply -f ./manifests/service.yaml






# workflows:
#   version: 2
#   build:
#     jobs:
#       - build:
#           context: secrets
#       - aws-example:
#           context: secrets
#       - deploy:
#           context: secrets
